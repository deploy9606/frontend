import React from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

type SectionSpec = {
  ref: React.RefObject<HTMLElement>;
  title?: string;
};

type CoverMeta = {
  logoSrc?: string;              // data URL or CORS-enabled URL
  title?: string;                // default: "Property Analysis Report"
  date: string;
  propertyAddress: string;
  propertyType: string;
  propertySize: string;          // e.g., "10 acres"
  buildingSize: string;          // e.g., "45,000 SF"
  brandColor?: string;           // HEX like "#0E5AA7"
};

type Props = {
  coverMeta: CoverMeta;
  sections: SectionSpec[];
  filename?: string;
  pageFormat?: "letter" | "a4";
  marginPt?: number;
  includePageNumbers?: boolean;
};

const formatSizeMap: Record<NonNullable<Props["pageFormat"]>, [number, number]> = {
  letter: [612, 792],
  a4: [595.28, 841.89],
};

function hexToRgb(hex: string): { r: number; g: number; b: number } {
  const m = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex.trim());
  const bad = { r: 30, g: 58, b: 138 }; // fallback indigo-700
  if (!m) return bad;
  return { r: parseInt(m[1], 16), g: parseInt(m[2], 16), b: parseInt(m[3], 16) };
}



async function fetchImageDataURL(src: string): Promise<string> {
  try {
    const res = await fetch(src, { mode: "cors" });
    const blob = await res.blob();
    return await new Promise<string>((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch {
    return "";
  }
}

async function drawCoverPage(
  doc: jsPDF,
  meta: CoverMeta,
  pageW: number,
  pageH: number,
  marginPt: number
): Promise<void> {
  const centerX = pageW / 2;
  const brandHex = meta.brandColor ?? "#1E3A8A"; // indigo-700 default
  const brand = hexToRgb(brandHex);
  const bandH = 140;

  // Top brand band
  doc.setFillColor(brand.r, brand.g, brand.b);
  doc.rect(0, 0, pageW, bandH, "F");

  // Logo in the band
  if (meta.logoSrc) {
    const dataUrl = meta.logoSrc.startsWith("data:")
      ? meta.logoSrc
      : await fetchImageDataURL(meta.logoSrc);
    if (dataUrl) {
      const logoW = 160;
      const logoH = 60;
      doc.addImage(dataUrl, "PNG", centerX - logoW / 2, 30, logoW, logoH, undefined, "FAST");
    }
  }

  // Title below the band (brand-colored)
  doc.setFont("helvetica", "bold");
  doc.setFontSize(22);
  doc.setTextColor(brand.r, brand.g, brand.b);
  doc.text(meta.title ?? "Property Analysis Report", centerX, bandH + 40, { align: "center" });

  // Meta panel with brand border
  const boxW = pageW - marginPt * 2;
  const boxX = marginPt;
  const boxY = bandH + 70;
  const rowH = 26;
  const rows: Array<[string, string]> = [
    ["Date", meta.date],
    ["Property Address", meta.propertyAddress],
    ["Property Type", meta.propertyType],
    ["Property Size", meta.propertySize],
    ["Building Size", meta.buildingSize],
  ];

  doc.setDrawColor(brand.r, brand.g, brand.b);
  doc.setLineWidth(1.2);
  doc.roundedRect(boxX, boxY, boxW, rowH * rows.length + 24, 8, 8);

  // Thin brand rule at top of the box
  doc.line(boxX + 10, boxY + 16, boxX + boxW - 10, boxY + 16);

  // Labels + values
  const labelW = 150;
  let y = boxY + 32;
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);

  for (const [label, value] of rows) {
    doc.setFont("helvetica", "bold");
    doc.text(label, boxX + 16, y);
    doc.setFont("helvetica", "normal");
    const wrapped = doc.splitTextToSize(value, boxW - labelW - 40);
    doc.text(wrapped, boxX + labelW, y);
    y += rowH;
  }

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(120);
  doc.text("Generated by 9606 Capital", marginPt, pageH - marginPt / 2);
  doc.setTextColor(0);
}

async function renderElToPage(
  doc: jsPDF,
  el: HTMLElement,
  pageW: number,
  pageH: number,
  marginPt: number,
  title?: string
): Promise<void> {
  const canvas = await html2canvas(el, {
    scale: 2,
    useCORS: true,
    backgroundColor: "#ffffff",
    windowWidth: el.scrollWidth,
    windowHeight: el.scrollHeight,
  });

  const printableW = pageW - marginPt * 2;
  const printableH = pageH - marginPt * 2;

  const imgW = canvas.width;
  const imgH = canvas.height;
  const scale = Math.min(printableW / imgW, printableH / imgH);

  const drawW = imgW * scale;
  const drawH = imgH * scale;

  const x = marginPt + (printableW - drawW) / 2;
  const y = marginPt + (printableH - drawH) / 2;

  if (title) {
    doc.setFontSize(12);
    doc.text(title, marginPt, marginPt - 10);
  }

  doc.addImage(canvas.toDataURL("image/png"), "PNG", x, y, drawW, drawH, undefined, "FAST");
}

export const GenerateReportButton: React.FC<Props> = ({
  coverMeta,
  sections,
  filename = "Report.pdf",
  pageFormat = "letter",
  marginPt = 36,
  includePageNumbers = true,
}) => {
  const handleExport = async (): Promise<void> => {
    const [pageW, pageH] = formatSizeMap[pageFormat];
    const doc = new jsPDF({ unit: "pt", format: [pageW, pageH] });

    // COVER
    await drawCoverPage(doc, coverMeta, pageW, pageH, marginPt);

    // SECTION PAGES
    const validSections = sections.filter((s) => s.ref.current);
    const brand = hexToRgb(coverMeta.brandColor ?? "#1E3A8A");

    for (let i = 0; i < validSections.length; i++) {
      doc.addPage([pageW, pageH]);
      const s = validSections[i];
      await renderElToPage(doc, s.ref.current as HTMLElement, pageW, pageH, marginPt, s.title);

      if (includePageNumbers) {
        doc.setFontSize(10);
        doc.setTextColor(brand.r, brand.g, brand.b);
        const pageIndex = i + 2; // cover = page 1
        const totalPages = validSections.length + 1;
        const pageNum = `${pageIndex} / ${totalPages}`;
        doc.text(pageNum, pageW - marginPt, pageH - marginPt / 2, { align: "right" });
        doc.setTextColor(0, 0, 0);
      }
    }

    doc.save(filename);
  };

  return (
    <button
      type="button"
      onClick={handleExport}
      className="px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
      aria-label="Generate PDF Report"
    >
      Generate Report (PDF)
    </button>
  );
};
